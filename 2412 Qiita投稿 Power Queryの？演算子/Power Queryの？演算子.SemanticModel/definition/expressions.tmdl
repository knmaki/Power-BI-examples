/// https://learn.microsoft.com/ja-jp/powerquery-m/m-spec-operators#item-access
expression ？なし = ```
		let
		   #"💖" = "",
		   
		   // Listの範囲内の要素
		   #"case1 List" = {"a","b","c"}, 
		   // 0番目の要素にアクセス -> a
		   #"case1 結果" = {"a","b","c"}{0},
		
		   // Listの範囲内の要素
		   #"case2 List" = {1, [A=2], 3} ,
		   // 1番目の要素にアクセス -> [A=2]
		   #"case2 結果" = {1, [A=2], 3}{1} ,
		
		   // Listの範囲外の要素
		   #"case3 List" =  {true, false} ,            
		   // 2番目の要素（リストの範囲外）にアクセス -> error
		   #"case3 結果⚠" =  {true, false}{2} ,
		
		   // Tableに存在するRecord
		   #"case4 Table" =  #table({"A","B"},{{0,1},{2,1}}),
		   // Tableの0行目にアクセス -> [A=0,B=1]
		   #"case4 結果" =  #table({"A","B"},{{0,1},{2,1}}){0},
		
		   // Tableに存在するRecord
		   #"case5 Table" =  #table({"A","B"},{{0,1},{2,1}}),
		   // TableのうちA=2のものにアクセス -> [A=2,B=1] 
		   #"case5 結果" =  #table({"A","B"},{{0,1},{2,1}}){[A=2]},
		
		   // Tablに存在しないRecord
		   #"case6 Table" =  #table({"A","B"},{{0,1},{2,1}}),
		   // TableのうちB=3のもの（存在しない）にアクセス -> error 
		   #"case6 結果⚠" =  #table({"A","B"},{{0,1},{2,1}}){[B=3]},
		
		   // Tableに複数存在するRecord
		   #"case7 Table" =  #table({"A","B"},{{0,1},{2,1}}),
		   // TableのうちB=1のもの（2件存在）にアクセス -> error 
		   #"case7 結果⚠" =  #table({"A","B"},{{0,1},{2,1}}){[B=1]},
		
		   ret = "各ステップを見てね"
		in
		   ret
		```
	lineageTag: 269bf620-2978-4a00-a991-cf4901b7ee15
	queryGroup: 項目アクセス

	annotation PBI_NavigationStepName = ナビゲーション

	annotation PBI_ResultType = Text

/// https://learn.microsoft.com/ja-jp/powerquery-m/m-spec-operators#item-access
expression ？あり = ```
		let
		   #"💖" = "",
		   // Listの範囲内の要素
		   #"case1 List" = {"a","b","c"}, 
		   // 0番目の要素にアクセス -> a
		   #"case1 結果" = {"a","b","c"}{0}?,
		
		   // Listの範囲内の要素
		   #"case2 List" = {1, [A=2], 3} ,
		   // 1番目の要素にアクセス -> [A=2]
		   #"case2 結果" = {1, [A=2], 3}{1}? ,
		
		   // Listの範囲外の要素
		   #"case3 List" =  {true, false} ,            
		   // 2番目の要素（リストの範囲外）にアクセス -> null
		   #"case3 結果∅" =  {true, false}{2}?,
		
		   // Tableに存在するRecord
		   #"case4 Table" =  #table({"A","B"},{{0,1},{2,1}}),
		   // Tableの0行目にアクセス -> [A=0,B=1]
		   #"case4 結果" =  #table({"A","B"},{{0,1},{2,1}}){0}?,
		      
		   // Tableに存在するRecord
		   #"case5 Table" =  #table({"A","B"},{{0,1},{2,1}}),
		   // TableのうちA=2のものにアクセス -> [A=2,B=1] 
		   #"case5 結果" =  #table({"A","B"},{{0,1},{2,1}}){[A=2]}?,
		
		   // Tablに存在しないRecord
		   #"case6 Table" =  #table({"A","B"},{{0,1},{2,1}}),
		   // TableのうちB=3のもの（存在しない）にアクセス -> null
		   #"case6 結果∅" =  #table({"A","B"},{{0,1},{2,1}}){[B=3]}?,
		
		   // Tableに複数存在するRecord
		   #"case7 Table" =  #table({"A","B"},{{0,1},{2,1}}),
		   // TableのうちB=1のもの（2件存在）にアクセス -> error 
		   #"case7 結果⚠" =  #table({"A","B"},{{0,1},{2,1}}){[B=1]}?,
		
		   ret = "各ステップを見てね"
		in
		   ret
		```
	lineageTag: fa198401-6044-4730-bda2-2e62314e40b5
	queryGroup: 項目アクセス

	annotation PBI_NavigationStepName = ナビゲーション

	annotation PBI_ResultType = Exception

/// errorは取得されるまで評価されない
expression エラー評価 = ```
		let
		    #"💖" = "",
		
		   // Listからerror以外を取得 -> 1
		   #"case 1" = { error "a", 1, error "c"}{1},
		
		   // Listからerrorを取得 -> error "b"　
		   #"case 2" = { error "a", error "b"}{1},
		   
		   ret = "各ステップを見てね"
		in
		   ret
		```
	lineageTag: b358a269-4f6a-45ac-8208-cc15856078d3
	queryGroup: 項目アクセス

	annotation PBI_NavigationStepName = ナビゲーション

	annotation PBI_ResultType = Text

expression 項目取得 = ```
		let
		    #"💖" = "",
		
			// レコードのフィールドにアクセス
		    #"case 1 Record" = [A=1,B=2],
			
			// 存在するフィールド -> 2
		    #"case 1-1 結果" = [A=1,B=2][B],
		
			// 存在しないフィールド（?なし） -> error
			#"case 1-2 結果⚠" = [A=1,B=2][C],
		
			// 存在しないフィールド（?あり） -> null
		    #"case 1-3 結果∅" = [A=1,B=2][C]?,
		
			ret = "各ステップを見てね"
		in
		   ret	
		```
	lineageTag: 06078876-d2e9-477f-901b-3278c4c66cda
	queryGroup: 'フィールド アクセス'

	annotation PBI_NavigationStepName = ナビゲーション

	annotation PBI_ResultType = Null

expression 射影 = ```
		let
			#"💖" = "",
		
			// Recordの一部フィールドからRecordを作成
		    #"case 1 Record" = [A=1,B=2],        
		
		    // 存在するフィールド -> [B=2]
		    #"case 1-1 結果" = [A=1,B=2][[B]],       
		
			// 存在しないフィールド（?なし） -> error
		    #"case 1-2 結果⚠" = [A=1,B=2][[C]], 
		
			// 存在しないフィールド（?あり） -> [B=2,C=null]
		    #"case 1-3 結果" = [A=1,B=2][[B], [C]]?,
			
			ret = "各ステップを見てね"
		in
			ret
		```
	lineageTag: 80a73a43-58ed-476c-8a1b-9c7742c09cd0
	queryGroup: 'フィールド アクセス'

	annotation PBI_NavigationStepName = ナビゲーション

	annotation PBI_ResultType = Record

/// https://gorilla.bi/power-query/coalesce/
expression Coalesce = ```
		let
			#"💖" = "",
		
			// nullに値を足す -> null
		    #"case 1" = null + 5,
			
			// if文を使うと（#"case 1"の値はnull） -> 5
		    #"case 2 if文" = (if #"case 1" <> null then #"case 1" else 0) + 5,
		
			// Coalesce演算子を使うとすっきり -> 5
		    #"case 3 Coalesce" = (null ?? 0) + 5,
		
			// 関数なら別の回避方法も -> 5
		    #"case 4 List.Sum" = List.Sum({#"case 1", #"case 3"}),
		
			// 引数リストの値がすべてnullなら -> null
		    #"case 5 List.Sum全部null" = List.Sum({null, null}),
		
			// 引数リストに0のみのリストを追加する -> 0
		    #"case 6 List.Sumに0追加" = List.Sum({null, null} & {0}),
		
			// Coalesce演算子でも -> 0
		    #"case 7 List.SumとCoalesce" = List.Sum({null, null}) ?? 0,
		
			ret = "各ステップを見てね"
		in
		   ret	
		```
	lineageTag: 7466149c-6a2c-4b2a-a1f8-8fa5380997d1
	queryGroup: '合体演算子（Coalesce Operator）'

	annotation PBI_NavigationStepName = ナビゲーション

	annotation PBI_ResultType = Number

